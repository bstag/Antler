---
// Import global styles
import '../styles/global.css';
import '../styles/animations.css';

// Import static config helper
import { getSiteConfig } from '../lib/config/static';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
}

// Load site configuration
const config = await getSiteConfig();
const { description: defaultDescription, author, seo, theme, urls } = config.customization;

const {
  title,
  description = defaultDescription,
  image = seo.defaultImage || '/og-image.jpg',
  type = 'website'
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Get theme configuration
const defaultTheme = theme.default;
const availableThemes = theme.availableThemes;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />
    
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content={author.name} />
    {seo.keywords && seo.keywords.length > 0 && (
      <meta name="keywords" content={seo.keywords.join(', ')} />
    )}
    {seo.googleSiteVerification && (
      <meta name="google-site-verification" content={seo.googleSiteVerification} />
    )}
    {seo.twitterHandle && (
      <meta name="twitter:creator" content={seo.twitterHandle} />
    )}
    {seo.facebookAppId && (
      <meta property="fb:app_id" content={seo.facebookAppId} />
    )}
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- Theme color -->
    <meta name="theme-color" content="#8b5cf6" />

    <!-- Theme Configuration -->
    <meta name="theme-default" content={defaultTheme} />
    <meta name="base-url" content={import.meta.env.BASE_URL} />
    <script id="theme-config" type="application/json">
      {JSON.stringify({
        default: defaultTheme,
        available: availableThemes
      })}
    </script>

    <!-- Load Color Theme CSS -->
    <link id="theme-stylesheet" rel="stylesheet" href={`${import.meta.env.BASE_URL}/styles/themes/theme-${defaultTheme}.css`} />

    <title>{title}</title>

    <!-- Prevent theme flash (FOUC) and initialize color theme -->
    <script is:inline define:vars={{ defaultTheme, baseUrl: import.meta.env.BASE_URL }}>
      (function() {
        // Initialize dark/light mode
        const savedDarkMode = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const darkMode = savedDarkMode || (prefersDark ? 'dark' : 'light');

        // Apply dark mode immediately
        if (darkMode === 'dark') {
          document.documentElement.setAttribute('data-theme', 'dark');
          document.documentElement.classList.add('dark');
        }

        // Initialize color theme
        const THEME_STORAGE_KEY = 'antler-selected-theme';
        const userPreference = localStorage.getItem(THEME_STORAGE_KEY);
        const colorTheme = userPreference || defaultTheme;

        // Load color theme CSS
        const themeLink = document.getElementById('theme-stylesheet');
        if (themeLink && userPreference) {
          themeLink.href = `${baseUrl}/styles/themes/theme-${colorTheme}.css`;
        }
      })();
    </script>
  </head>
  <body class="bg-white dark:bg-slate-900 text-slate-900 dark:text-white transition-colors duration-300">
    <slot />
    
    <!-- Intersection Observer for scroll animations -->
    <script>
      // Intersection Observer for fade-in animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
          }
        });
      }, observerOptions);

      // Observe all elements with fade-in-on-scroll class
      document.addEventListener('DOMContentLoaded', () => {
        const elements = document.querySelectorAll('.fade-in-on-scroll');
        elements.forEach(el => observer.observe(el));
      });

      // Theme toggle functionality
      function initTheme() {
        const theme = localStorage.getItem('theme') || 'light';
        document.documentElement.classList.toggle('dark', theme === 'dark');
      }

      // Initialize theme on page load
      initTheme();
    </script>
  </body>
</html>