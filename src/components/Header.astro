---
import ThemeToggle from './ThemeToggle.tsx';
import DynamicNavigation from './DynamicNavigation.tsx';
import { getSiteConfig, resolvePath } from '../lib/config/static';

// Load site configuration
const config = await getSiteConfig();
const { siteName, logo } = config.customization;

// Get current path for active link highlighting
const currentPath = Astro.url.pathname;
---

<header class="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800">
  <nav class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16 relative">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={resolvePath(config, '/')} class="flex items-center space-x-2 text-xl font-bold text-primary hover:opacity-80 transition-opacity">
          {logo && logo.type === 'svg' && logo.svgContent && (
            <Fragment set:html={logo.svgContent} />
          )}
          {logo && logo.type === 'image' && logo.imagePath && (
            <img
              src={logo.imagePath}
              alt={logo.imageAlt || siteName}
              class={logo.width || 'w-8 h-8'}
            />
          )}
          <span>{siteName}</span>
        </a>
      </div>

      <!-- Dynamic Navigation -->
      <DynamicNavigation currentPath={currentPath} client:load />

      <!-- Theme Toggle -->
      <div class="flex items-center space-x-4">
        <ThemeToggle client:load />
      </div>
    </div>
  </nav>
</header>

<style>
  /* Navigation styles are now handled in global CSS for React components */
</style>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = mobileMenuButton?.querySelector('svg:first-child');
    const closeIcon = mobileMenuButton?.querySelector('svg:last-child');

    mobileMenuButton?.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu?.classList.toggle('hidden');
      menuIcon?.classList.toggle('hidden');
      closeIcon?.classList.toggle('hidden');
    });

    // Close mobile menu when clicking on a link
    const mobileLinks = mobileMenu?.querySelectorAll('a');
    mobileLinks?.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
        mobileMenuButton?.setAttribute('aria-expanded', 'false');
        menuIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
      });
    });
  });

  // Set active navigation link
  document.addEventListener('DOMContentLoaded', () => {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link, .mobile-nav-link');
    
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath.startsWith(href) && href !== '/'))) {
        link.setAttribute('aria-current', 'page');
      }
    });
  });
</script>